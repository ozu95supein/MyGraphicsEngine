while (!glfwWindowShouldClose(window))	
	{	
		// Specify the color of the background	
		glClearColor(0.07f, 0.13f, 0.17f, 1.0f);	
		// Clean the back buffer and depth buffer	
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);	
		// Handles camera inputs	
		camera.Inputs(window);	
		// Updates and exports the camera matrix to the Vertex Shader	
		camera.updateMatrix(45.0f, 0.1f, 100.0f);	
		// Make it so the stencil test always passes	
		glStencilFunc(GL_ALWAYS, 1, 0xFF);	
		// Enable modifying of the stencil buffer	
		glStencilMask(0xFF);	
		// Draw the normal model	
		model.Draw(shaderProgram, camera);	
		// Make it so only the pixels without the value 1 pass the test	
		glStencilFunc(GL_NOTEQUAL, 1, 0xFF);	
		// Disable modifying of the stencil buffer	
		glStencilMask(0x00);	
		// Disable the depth buffer	
		glDisable(GL_DEPTH_TEST);	
		// First method from the tutorial	
		//outliningProgram.Activate();	
		//glUniform1f(glGetUniformLocation(outliningProgram.ID, "outlining"), 1.08f);	
		//model.Draw(outliningProgram, camera);	
			
		// Second method from the tutorial	
		//outliningProgram.Activate();	
		//glUniform1f(glGetUniformLocation(outliningProgram.ID, "outlining"), 0.08f);	
		//model.Draw(outliningProgram, camera);	
			
		// Third method from the tutorial	
		outline.Draw(outliningProgram, camera);	
		// Enable modifying of the stencil buffer	
		glStencilMask(0xFF);	
		// Clear stencil buffer	
		glStencilFunc(GL_ALWAYS, 0, 0xFF);	
		// Enable the depth buffer	
		glEnable(GL_DEPTH_TEST);	
		// Swap the back buffer with the front buffer	
		glfwSwapBuffers(window);	
		// Take care of all GLFW events	
		glfwPollEvents();	
	}	
